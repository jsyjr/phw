There is always a PHW, even if termporarily hidden.

;; Navigation
C-x o		Alternate between current edit window and PHW
C-. .		Jomp to PHW (of if in PHW then cycle)
C-. n		Jump to next edit window
C-. p		Jump to previous edit window
C-. 1-9		Jump to edit window N (or if in edit window N then cycle)

;; Verb keys taking a target
m               move
x               exchange


;; Moving buffers between windows
C-. m .		Send selected buffer to PHW and mark for PHW
C-. m 1-9	Send selected buffer to edit window N and unmark for PHW

;; Swap window contents
C-. t		Swap/transpose contents of current edit window and next

;; Resizing current edit window
C-. /		Cycle: unlocked, max, min



PHW
edit-N
edit-N / min
edit-N / max

Buffer local variables:
phw--window: nil (=> unrestricted) or a window-object (=> bound if live)
phw--size:
  nil : dynamic
  0   : goal - shrink to fit
  N   : goal - N lines
  t   : goal - maximize

(=> not local, dyn), t (=> max)
phw--size-phw:  nil (=> not local, dyn), t (=> min)


 PHW |   Edit    |
 low | nil |  t  |
-----+-----+-----+
 nil |	4  |  3  |
-----+-----+-----+
  t  |	4  |  3  |
-----+-----+-----+

1: minimize PHW
2: fit PHW
3: fit edit
4: maximize PHW


When edit:
 - make PHW default-small
 - if PHW at top then shrink to fit

When PHW:
 - make PHW default-large

Binding:
overlaying a buffer => bind to current window
kill => unbind from any window

Bind BUF to WIN
- unbind if phw--window is non-null
- set phw--window = WIN
- make 
