1755: (defecb-advice enlarge-window around ecb-layout-basic-adviced-functions

 (defecb-advice enlarge-window around ecb-layout-basic-adviced-functions
   "Allows manually window-resizing even if `ecb-fix-window-size' is not nil
for current layout."
   (if (and ecb-minor-mode
            (equal (selected-frame) ecb-frame)
            (not (ecb-windows-all-hidden))
            (ecb-get-window-fix-type ecb-layout-name)
            (member (selected-window) (ecb-canonical-ecb-windows-list)))
       (ecb-do-with-unfixed-ecb-buffers ad-do-it)
     ad-do-it))

1766: (defecb-advice shrink-window around ecb-layout-basic-adviced-functions

 (defecb-advice shrink-window around ecb-layout-basic-adviced-functions
   "Allows manually window-resizing even if `ecb-fix-window-size' is not nil
for current layout."
   (if (and ecb-minor-mode
            (equal (selected-frame) ecb-frame)
            (not (ecb-windows-all-hidden))
            ;; See comment of defecb-advice for mouse-drag-mode-line
            (ecb-get-window-fix-type ecb-layout-name)
            (member (selected-window) (ecb-canonical-ecb-windows-list)))
       (ecb-do-with-unfixed-ecb-buffers ad-do-it)
     ad-do-it))

1778: (defecb-advice shrink-window-if-larger-than-buffer around ecb-layout-basic-adviced-functions

defecb-advice shrink-window-if-larger-than-buffer around ecb-layout-basic-adviced-functions
   "Makes the function compatible with ECB."
   (or (ad-get-arg 0) (ad-set-arg 0 (selected-window)))
   (ecb-layout-debug-error "shrink-window-if-larger-than-buffer: window: %s"
                           (ad-get-arg 0))
   (if (or (not ecb-minor-mode)
           (not (equal (window-frame (ad-get-arg 0)) ecb-frame))
           (member (ad-get-arg 0) (ecb-canonical-ecb-windows-list)))
       (ecb-with-original-basic-functions
        ad-do-it)
     (save-selected-window
       (select-window (ad-get-arg 0))
       (ecb-layout-debug-error "shrink-window-if-larger-than-buffer: buffer to shrink: %s"
                               (current-buffer))
       (let* ((params (frame-parameters))
              (mini (cdr (assq 'minibuffer params)))
              (edges (ecb-window-edges))
              ;; we prevent to shrink the compile-window below
              ;; `ecb-compile-window-height'
              (window-min-height (if (and (equal (ad-get-arg 0) ecb-compile-window)
                                          (and ecb-compile-window-prevent-shrink-below-height
                                               (not (ecb-interactive-p)))
                                          window-min-height
                                          ecb-compile-window-height-lines
                                          (< window-min-height
                                             ecb-compile-window-height-lines))
                                     ecb-compile-window-height-lines
                                   window-min-height)))
         (if (and (let ((frame (selected-frame)))
                    (select-frame (window-frame (ad-get-arg 0)))
                    (unwind-protect
                        (not (one-window-p t))
                      (select-frame frame)))
                  (ecb-window-safely-shrinkable-p (ad-get-arg 0))
                  (pos-visible-in-window-p (point-min) (ad-get-arg 0))
                  (not (eq mini 'only))
                  (or (not mini)
                      (< (nth 3 edges) (nth 1 (ecb-window-edges mini)))
                      (> (nth 1 edges) (cdr (assq 'menu-bar-lines params)))))
             (ecb-fit-window-to-buffer (ad-get-arg 0)
                                       (ecb-window-full-height (ad-get-arg 0))))))))

1820: (defecb-advice resize-temp-buffer-window around ecb-layout-basic-adviced-functions

 (defecb-advice resize-temp-buffer-window around ecb-layout-basic-adviced-functions
   "Makes the function compatible with ECB."
   (ecb-layout-debug-error "resize-temp-buffer-window: buffer: %s, window: %s, frame: %s"
                           (current-buffer) (selected-window) (selected-frame))
   (if (or (not ecb-minor-mode)
           (not (equal (selected-frame) ecb-frame))
           (equal (car (ecb-where-is-point)) 'ecb))
       (ecb-with-original-basic-functions
        ad-do-it)
     (if (and (equal (selected-window) ecb-compile-window)
              (member ecb-compile-window-temporally-enlarge
                      '(after-selection nil))
              ;; The *Completions* buffer must always being enlarged!!
              (not (ecb-string= (buffer-name (current-buffer)) "*Completions*")))
         (progn
           (ecb-layout-debug-error "resize-temp-buffer-window: buffer: shrink to comp-win-height")
           (ecb-toggle-compile-window-height -1))
       ;; we prevent to shrink the compile-window below
       ;; `ecb-compile-window-height'
       (let ((window-min-height (if (and window-min-height
                                         ecb-compile-window-height-lines
                                         ecb-compile-window-prevent-shrink-below-height
                                         (< window-min-height
                                            ecb-compile-window-height-lines))
                                    ecb-compile-window-height-lines
                                  window-min-height)))
         (ecb-layout-debug-error "resize-temp-buffer-window: within let - window: %s"
                                 (selected-window))
         (ecb-layout-debug-error "resize-temp-buffer-window: check unless %s, %s, %s"
                                 (one-window-p 'nomini)
                                 (and (not (equal (selected-window) ecb-compile-window))
                                      (not (ecb-edit-window-splitted)))
                                 (not (pos-visible-in-window-p (point-min))))
         (unless (or (one-window-p 'nomini)
                     ;; Klaus Berndl <klaus.berndl@sdm.de>: we do nothing if an unsplitted
                     ;; edit-window should be resized because this would fail (e.g. if
                     ;; `pop-up-windows' is nil)
                     (and (not (equal (selected-window) ecb-compile-window))
                          (not (ecb-edit-window-splitted)))
                     (not (pos-visible-in-window-p (point-min)))
                     )
           (ecb-layout-debug-error "resize-temp-buffer-window: resize buffer: %s"
                                   (current-buffer))
           (ecb-fit-window-to-buffer
            (selected-window)
            (if (functionp temp-buffer-max-height)
                (funcall temp-buffer-max-height (current-buffer))
              temp-buffer-max-height)))))))

1869: (defecb-advice pop-to-buffer around ecb-layout-basic-adviced-functions
 
 (defecb-advice pop-to-buffer around ecb-layout-basic-adviced-functions
   "Chooses the window with the ECB-adviced version of `display-buffer'."
   (if (or (not ecb-minor-mode)
           (null (ad-get-arg 0)))
       (ecb-with-original-basic-functions
        ad-do-it)
     (condition-case nil
         (progn
           (ecb-layout-debug-error "pop-to-buffer: buffer: %s, %s"
                                   (ad-get-arg 0) (ad-get-arg 1))
           (select-window (display-buffer (ad-get-arg 0)
                                          (ad-get-arg 1)))
           ;; TODO: Klaus Berndl <klaus.berndl@sdm.de>: Do we need this?!
           (set-buffer (ad-get-arg 0))
           (if (ad-get-arg 2)
               ;; not the best solution but for now....
               (bury-buffer (ad-get-arg 0))))
       ;; This is if the call to the adviced `display-buffer' fails (seems
       ;; to make problems with C-h i and the *info*-buffer). Then we run the
       ;; orginal version.
       (error
        (ecb-layout-debug-error "pop-to-buffer: adviced version failed for buffer: %s, %s"
                                (ad-get-arg 0) (ad-get-arg 1))
        (if (ecb-buffer-is-dedicated-special-buffer-p (ad-get-arg 0))
            (ecb-error "Can not go to a invisible special ECB-buffer!")
          ad-do-it)))
     (when (ecb-point-in-compile-window)
       ;; we set the height of the compile-window according to
       ;; `ecb-enlarged-compilation-window-max-height'
       (ecb-set-compile-window-height)))))

3016:(defecb-advice display-buffer around ecb-layout-basic-adviced-functions



3393:(defecb-advice other-window around ecb-layout-basic-adviced-functions
(defecb-advice other-window around ecb-layout-basic-adviced-functions
  "The ECB-version of `other-window'. Works exactly like the original function
with the following ECB-adjustment: The behavior depends on
`ecb-other-window-behavior'."
  (if (or (not ecb-minor-mode)
          (not (equal (selected-frame) ecb-frame)))
      (ecb-with-original-basic-functions
       ad-do-it)
    (let* ((count (if (ad-get-arg 0)
                      (ad-get-arg 0)
                    1))
           (o-w (ecb-get-other-window count)))
      (select-window o-w))))


3798:(defecb-advice switch-to-buffer-other-window around ecb-layout-basic-adviced-functions

defecb-advice switch-to-buffer-other-window around ecb-layout-basic-adviced-functions
  "The ECB-version of `switch-to-buffer-other-window'. Works exactly like the
original but with some adaptions for ECB so this function works in a
\"natural\" way:

If called in any special ecb-window of the current ECB-layout then it goes
always to an edit-window \(which one depends on the setting in
`ecb-mouse-click-destination') and then goes on as if called from this
edit-window.

If a compile-window is used \(i.e. `ecb-compile-window-height' is not nil)
then \"compilation-buffers\" in the sense of `ecb-compilation-buffer-p' are
always displayed in the compile-window. If the compile-window is temporally
hidden then it will be displayed first. If no compile-window is used it
behaves like the original.

If called from within the compile-window then \"compilation-buffers\" will be
displayed still there and all other buffers are displayed in one of the
edit-windows - if the destination-buffer is already displayed in one of the
edit-windows then this one is used otherwise it behaves like the original.

If called within an edit-window it behaves like the original function except
for compilation-buffers \(if a compile-window is used, see above)."
  (if (or (not ecb-minor-mode)
          (not (equal (selected-frame) ecb-frame)))
      (ecb-with-original-basic-functions
       ad-do-it)
    (if (equal (car (ecb-where-is-point)) 'ecb)
        (ecb-select-edit-window))
    (let ((pop-up-windows t)
          ;; Don't let these interfere...
          same-window-buffer-names same-window-regexps)          
      (pop-to-buffer (ad-get-arg 0) t
                     (if ecb-running-xemacs
                         (selected-frame)
                       (ad-get-arg 1))))))

3840:(defecb-advice switch-to-buffer around ecb-layout-basic-adviced-functions

;; Klaus Berndl <klaus.berndl@sdm.de>: We can not use pop-to-buffer here
;; because with XEmacs there is an error max-lisp-eval-depth exceeded. XEmacs
;; implements display-buffer (which is called by pop-to-buffer) internally
;; with switch-to-buffer so there is an bidirectional dependency - ugly :-(
(defecb-advice switch-to-buffer around ecb-layout-basic-adviced-functions
  "The ECB-version of `switch-to-buffer'. Works exactly like the original but
with the following enhancements for ECB:

\"compilation-buffers\" in the sense of `ecb-compilation-buffer-p' will be
displayed always in the compile-window of ECB \(if `ecb-compile-window-height'
is not nil) - if the compile-window is temporally hidden then it will be
displayed first. If you do not want this you have to modify the options
`ecb-compilation-buffer-names', `ecb-compilation-major-modes' or
`ecb-compilation-predicates'.

If called for non \"compilation-buffers\" \(s.a.) from outside the edit-area
of ECB it behaves as if called from an edit-window if `switch-to-buffer' is
contained in the option `ecb-layout-always-operate-in-edit-window'. Otherwise
an error is reported."
  (if (or (not ecb-minor-mode)
          (not (equal (selected-frame) ecb-frame)))
      (ecb-with-original-basic-functions
       ad-do-it)
    (ecb-layout-debug-error "switch-to-buffer buffer: %s" (ad-get-arg 0))
    (cond ((ecb-compilation-buffer-p (ad-get-arg 0))
           (when (equal 'hidden (ecb-compile-window-state))
             (ecb-toggle-compile-window 1))
           (if (ecb-compile-window-live-p)
               (select-window ecb-compile-window))
           ;; now we must handle if there is still no compile-window and
           ;; therefore point can still stay in an ecb-window
           (if (equal (car (ecb-where-is-point)) 'ecb)
               (if (member 'switch-to-buffer ecb-layout-always-operate-in-edit-window)
                   (ecb-select-edit-window)
                 (ecb-error "switch-to-buffer: Can not switch to %s in an ecb-window!"
                            (ad-get-arg 0)))))
          ((ecb-buffer-is-dedicated-special-buffer-p (ad-get-arg 0))
           (if (get-buffer-window (ad-get-arg 0) ecb-frame)
               (select-window (get-buffer-window (ad-get-arg 0) ecb-frame))
             (ecb-error "switch-to-buffer: Can only switch to visible special ecb-buffers!")))
          (t ;; normal buffers
           (if (member (car (ecb-where-is-point)) '(ecb compile))
               (if (member 'switch-to-buffer ecb-layout-always-operate-in-edit-window)
                   (ecb-select-edit-window)
                 (ecb-error "switch-to-buffer: Can only switch to %s in an edit-window!"
                            (ad-get-arg 0))))))
    ;; now we stay in the correct window
    (ecb-with-original-basic-functions
     ad-do-it)
    (ecb-layout-debug-error "switch-to-buffer curr-buffer: %s" (current-buffer))
    (when (ecb-point-in-compile-window)
      (ecb-layout-debug-error "switch-to-buffer curr-buffer: %s, curr window %s"
                              (current-buffer) (selected-window))
      ;; we set the height of the compile-window according to
      ;; `ecb-enlarged-compilation-window-max-height'
      (ecb-set-compile-window-height))))
